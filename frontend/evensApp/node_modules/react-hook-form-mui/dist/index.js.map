{"version":3,"sources":["../src/index.ts","../react-shim.js","../src/TextFieldElement.tsx","../src/FormErrorProvider.tsx","../src/FormContainer.tsx","../src/DatePickerElement.tsx","../src/DateTimePickerElement.tsx","../src/TimePickerElement.tsx","../src/CheckboxElement.tsx","../src/SelectElement.tsx","../src/CheckboxButtonGroup.tsx","../src/MultiSelectElement.tsx","../src/PasswordElement.tsx","../src/RadioButtonGroup.tsx","../src/SwitchElement.tsx","../src/PasswordRepeatElement.tsx","../src/AutocompleteElement.tsx","../src/SliderElement.tsx","../src/ToggleButtonGroupElement.tsx","../src/TextareaAutosizeElement.tsx"],"sourcesContent":["export {default as TextFieldElement} from './TextFieldElement'\nexport type {TextFieldElementProps} from './TextFieldElement'\n\nexport {default as FormContainer} from './FormContainer'\nexport type {FormContainerProps} from './FormContainer'\n\nexport {default as DatePickerElement} from './DatePickerElement'\nexport type {DatePickerElementProps} from './DatePickerElement'\n\nexport {default as DateTimePickerElement} from './DateTimePickerElement'\nexport type {DateTimePickerElementProps} from './DateTimePickerElement'\n\nexport {default as TimePickerElement} from './TimePickerElement'\nexport type {TimePickerElementProps} from './TimePickerElement'\n\nexport {default as CheckboxElement} from './CheckboxElement'\nexport type {CheckboxElementProps} from './CheckboxElement'\n\nexport {default as SelectElement} from './SelectElement'\nexport type {SelectElementProps} from './SelectElement'\n\nexport {default as CheckboxButtonGroup} from './CheckboxButtonGroup'\nexport type {CheckboxButtonGroupProps} from './CheckboxButtonGroup'\n\nexport {default as MultiSelectElement} from './MultiSelectElement'\nexport type {MultiSelectElementProps} from './MultiSelectElement'\n\nexport {default as PasswordElement} from './PasswordElement'\nexport type {PasswordElementProps} from './PasswordElement'\n\nexport {default as RadioButtonGroup} from './RadioButtonGroup'\nexport type {RadioButtonGroupProps} from './RadioButtonGroup'\n\nexport {default as SwitchElement} from './SwitchElement'\nexport type {SwitchElementProps} from './SwitchElement'\n\nexport {default as PasswordRepeatElement} from './PasswordRepeatElement'\nexport type {PasswordRepeatElementProps} from './PasswordRepeatElement'\n\nexport {default as AutocompleteElement} from './AutocompleteElement'\nexport type {AutocompleteElementProps} from './AutocompleteElement'\n\nexport {default as SliderElement} from './SliderElement'\nexport type {SliderElementProps} from './SliderElement'\n\nexport {default as ToggleButtonGroupElement} from './ToggleButtonGroupElement'\nexport type {ToggleButtonGroupElementProps} from './ToggleButtonGroupElement'\n\nexport {default as TextareaAutosizeElement} from './TextareaAutosizeElement'\nexport type {TextareaAutosizeElementProps} from './TextareaAutosizeElement'\n\nexport {default as FormErrorProvider} from './FormErrorProvider'\nexport type {FormErrorProviderProps} from './FormErrorProvider'\nexport {useFormError} from './FormErrorProvider'\n\nexport * from 'react-hook-form'\n","import React from 'react'\n\nexport {React}\n","import {TextField, TextFieldProps} from '@mui/material'\nimport {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type TextFieldElementProps<T extends FieldValues = FieldValues> = Omit<\n  TextFieldProps,\n  'name'\n> & {\n  validation?: ControllerProps['rules']\n  name: Path<T>\n  parseError?: (error: FieldError) => string\n  control?: Control<T>\n}\n\nexport default function TextFieldElement<\n  TFieldValues extends FieldValues = FieldValues\n>({\n  validation = {},\n  parseError,\n  type,\n  required,\n  name,\n  control,\n  ...rest\n}: TextFieldElementProps<TFieldValues>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  if (type === 'email' && !validation.pattern) {\n    validation.pattern = {\n      value:\n        // eslint-disable-next-line no-useless-escape\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: 'Please enter a valid email address',\n    }\n  }\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={validation}\n      render={({\n        field: {value, onChange, onBlur, ref},\n        fieldState: {error},\n      }) => (\n        <TextField\n          {...rest}\n          name={name}\n          value={value ?? ''}\n          onChange={(ev) => {\n            onChange(\n              type === 'number' && ev.target.value\n                ? +ev.target.value\n                : ev.target.value\n            )\n            if (typeof rest.onChange === 'function') {\n              rest.onChange(ev)\n            }\n          }}\n          onBlur={onBlur}\n          required={required}\n          type={type}\n          error={!!error}\n          helperText={\n            error\n              ? typeof customErrorFn === 'function'\n                ? customErrorFn(error)\n                : error.message\n              : rest.helperText\n          }\n          inputRef={ref}\n        />\n      )}\n    />\n  )\n}\n","import {createContext, PropsWithChildren, useContext} from 'react'\nimport {FieldError} from 'react-hook-form'\n\nexport type FormErrorProviderProps = {\n  onError: (error: FieldError) => string | undefined\n}\n\nconst FormErrorProviderContext = createContext<FormErrorProviderProps>({\n  onError: (error) => error?.message,\n})\n\nexport default function FormErrorProvider({\n  onError,\n  children,\n}: PropsWithChildren<FormErrorProviderProps>) {\n  return (\n    <FormErrorProviderContext.Provider value={{onError}}>\n      {children}\n    </FormErrorProviderContext.Provider>\n  )\n}\n\nexport const useFormError = () => {\n  const errorCtx = useContext<FormErrorProviderProps>(FormErrorProviderContext)\n  return errorCtx?.onError\n}\n","import {FormEventHandler, FormHTMLAttributes, PropsWithChildren} from 'react'\nimport {\n  FormProvider,\n  SubmitErrorHandler,\n  SubmitHandler,\n  useForm,\n  UseFormProps,\n  UseFormReturn,\n} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\n\nexport type FormContainerProps<T extends FieldValues = FieldValues> =\n  PropsWithChildren<\n    UseFormProps<T> & {\n      onSuccess?: SubmitHandler<T>\n      onError?: SubmitErrorHandler<T>\n      FormProps?: FormHTMLAttributes<HTMLFormElement>\n      handleSubmit?: FormEventHandler<HTMLFormElement>\n      formContext?: UseFormReturn<T>\n    }\n  >\n\nexport default function FormContainer<\n  TFieldValues extends FieldValues = FieldValues\n>({\n  handleSubmit,\n  children,\n  FormProps,\n  formContext,\n  onSuccess,\n  onError,\n  ...useFormProps\n}: PropsWithChildren<FormContainerProps<TFieldValues>>) {\n  if (!formContext) {\n    return (\n      <FormProviderWithoutContext<TFieldValues>\n        {...{onSuccess, onError, FormProps, children, ...useFormProps}}\n      />\n    )\n  }\n  if (typeof onSuccess === 'function' && typeof handleSubmit === 'function') {\n    console.warn(\n      'Property `onSuccess` will be ignored because handleSubmit is provided'\n    )\n  }\n  return (\n    <FormProvider {...formContext}>\n      <form\n        noValidate\n        {...FormProps}\n        onSubmit={\n          handleSubmit\n            ? handleSubmit\n            : onSuccess\n            ? formContext.handleSubmit(onSuccess, onError)\n            : () => console.log('submit handler `onSuccess` is missing')\n        }\n      >\n        {children}\n      </form>\n    </FormProvider>\n  )\n}\n\nfunction FormProviderWithoutContext<\n  TFieldValues extends FieldValues = FieldValues\n>({\n  onSuccess,\n  onError,\n  FormProps,\n  children,\n  ...useFormProps\n}: PropsWithChildren<FormContainerProps<TFieldValues>>) {\n  const methods = useForm<TFieldValues>({\n    ...useFormProps,\n  })\n  const {handleSubmit} = methods\n\n  return (\n    <FormProvider {...methods}>\n      <form\n        onSubmit={handleSubmit(\n          onSuccess\n            ? onSuccess\n            : () => console.log('submit handler `onSuccess` is missing'),\n          onError\n        )}\n        noValidate\n        {...FormProps}\n      >\n        {children}\n      </form>\n    </FormProvider>\n  )\n}\n","import {DatePicker, DatePickerProps} from '@mui/x-date-pickers/DatePicker'\nimport {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {TextField, TextFieldProps} from '@mui/material'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport declare type ParseableDate<TDate> =\n  | string\n  | number\n  | Date\n  | null\n  | undefined\n  | TDate\n\nexport type DatePickerElementProps<\n  T extends FieldValues,\n  TInputDate,\n  TDate = TInputDate\n> = Omit<\n  DatePickerProps<TInputDate, TDate>,\n  'value' | 'onChange' | 'renderInput'\n> & {\n  name: Path<T>\n  required?: boolean\n  isDate?: boolean\n  parseError?: (error: FieldError) => string\n  onChange?: (value: TDate, keyboardInputValue?: string) => void\n  validation?: ControllerProps['rules']\n  control?: Control<T>\n  inputProps?: TextFieldProps\n  helperText?: TextFieldProps['helperText']\n  textReadOnly?: boolean\n}\n\nexport default function DatePickerElement<TFieldValues extends FieldValues>({\n  parseError,\n  name,\n  required,\n  validation = {},\n  inputProps,\n  control,\n  textReadOnly,\n  ...rest\n}: DatePickerElementProps<TFieldValues, any, any>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      defaultValue={null as any}\n      render={({field, fieldState: {error}}) => (\n        <DatePicker\n          {...rest}\n          {...field}\n          ref={(r) => {\n            field.ref(r?.querySelector('input'))\n          }}\n          onClose={(...args) => {\n            field.onBlur()\n            if (rest.onClose) {\n              rest.onClose(...args)\n            }\n          }}\n          onChange={(v, keyboardInputValue) => {\n            // console.log(v, keyboardInputValue)\n            field.onChange(v, keyboardInputValue)\n            if (typeof rest.onChange === 'function') {\n              rest.onChange(v, keyboardInputValue)\n            }\n          }}\n          renderInput={({error: inputError, ...params}) => (\n            <TextField\n              {...inputProps}\n              helperText={\n                error\n                  ? typeof customErrorFn === 'function'\n                    ? customErrorFn(error)\n                    : error.message\n                  : inputProps?.helperText || rest.helperText\n              }\n              {...params}\n              error={!!error}\n              inputProps={{\n                ...params?.inputProps,\n                ...(textReadOnly && {\n                  readOnly: true,\n                }),\n              }}\n            />\n          )}\n        />\n      )}\n    />\n  )\n}\n","import {\n  DateTimePicker,\n  DateTimePickerProps,\n} from '@mui/x-date-pickers/DateTimePicker'\nimport {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {TextField, TextFieldProps} from '@mui/material'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport declare type ParseableDate<TDate> =\n  | string\n  | number\n  | Date\n  | null\n  | undefined\n  | TDate\n\nexport type DateTimePickerElementProps<\n  T extends FieldValues,\n  TInputDate,\n  TDate = TInputDate\n> = Omit<\n  DateTimePickerProps<TInputDate, TDate>,\n  'value' | 'onChange' | 'renderInput'\n> & {\n  name: Path<T>\n  required?: boolean\n  isDate?: boolean\n  parseError?: (error: FieldError) => string\n  onChange?: (value: TDate, keyboardInputValue?: string) => void\n  validation?: ControllerProps['rules']\n  control?: Control<T>\n  inputProps?: TextFieldProps\n  helperText?: TextFieldProps['helperText']\n  textReadOnly?: boolean\n}\n\nexport default function DateTimePickerElement<\n  TFieldValues extends FieldValues\n>({\n  parseError,\n  name,\n  required,\n  validation = {},\n  inputProps,\n  control,\n  textReadOnly,\n  ...rest\n}: DateTimePickerElementProps<TFieldValues, any, any>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      defaultValue={'' as any}\n      render={({field, fieldState: {error}}) => (\n        <DateTimePicker\n          {...rest}\n          {...field}\n          ref={(r) => {\n            field.ref(r?.querySelector('input'))\n          }}\n          onClose={(...args) => {\n            field.onBlur()\n            if (rest.onClose) {\n              rest.onClose(...args)\n            }\n          }}\n          onChange={(v, keyboardInputValue) => {\n            field.onChange(v, keyboardInputValue)\n            if (typeof rest.onChange === 'function') {\n              rest.onChange(v, keyboardInputValue)\n            }\n          }}\n          renderInput={({error: inputError, ...params}) => (\n            <TextField\n              {...inputProps}\n              helperText={\n                error\n                  ? typeof customErrorFn === 'function'\n                    ? customErrorFn(error)\n                    : error.message\n                  : inputProps?.helperText || rest.helperText\n              }\n              {...params}\n              error={!!error}\n              inputProps={{\n                ...params?.inputProps,\n                ...(textReadOnly && {\n                  readOnly: true,\n                }),\n              }}\n            />\n          )}\n        />\n      )}\n    />\n  )\n}\n","import {TimePicker, TimePickerProps} from '@mui/x-date-pickers/TimePicker'\nimport {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {TextField, TextFieldProps} from '@mui/material'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport declare type ParseableDate<TDate> =\n  | string\n  | number\n  | Date\n  | null\n  | undefined\n  | TDate\n\nexport type TimePickerElementProps<\n  T extends FieldValues,\n  TInputDate,\n  TDate = TInputDate\n> = Omit<\n  TimePickerProps<TInputDate, TDate>,\n  'value' | 'onChange' | 'renderInput'\n> & {\n  name: Path<T>\n  required?: boolean\n  isDate?: boolean\n  parseError?: (error: FieldError) => string\n  onChange?: (value: TDate, keyboardInputValue?: string) => void\n  validation?: ControllerProps['rules']\n  control?: Control<T>\n  inputProps?: TextFieldProps\n  helperText?: TextFieldProps['helperText']\n  textReadOnly?: boolean\n}\n\nexport default function TimePickerElement<TFieldValues extends FieldValues>({\n  parseError,\n  name,\n  required,\n  validation = {},\n  inputProps,\n  control,\n  textReadOnly,\n  ...rest\n}: TimePickerElementProps<TFieldValues, string | null>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      defaultValue={null as any}\n      render={({field, fieldState: {error}}) => (\n        <TimePicker\n          {...rest}\n          {...field}\n          ref={(r) => {\n            field.ref(r?.querySelector('input'))\n          }}\n          onClose={(...args) => {\n            field.onBlur()\n            if (rest.onClose) {\n              rest.onClose(...args)\n            }\n          }}\n          onChange={(v, keyboardInputValue) => {\n            // console.log(v, keyboardInputValue)\n            field.onChange(v, keyboardInputValue)\n            if (typeof rest.onChange === 'function') {\n              rest.onChange(v, keyboardInputValue)\n            }\n          }}\n          renderInput={({error: inputError, ...params}) => (\n            <TextField\n              {...inputProps}\n              helperText={\n                error\n                  ? typeof customErrorFn === 'function'\n                    ? customErrorFn(error)\n                    : error.message\n                  : inputProps?.helperText || rest.helperText\n              }\n              {...params}\n              error={!!error}\n              inputProps={{\n                ...params?.inputProps,\n                ...(textReadOnly && {\n                  readOnly: true,\n                }),\n              }}\n            />\n          )}\n        />\n      )}\n    />\n  )\n}\n","import {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {\n  Checkbox,\n  CheckboxProps,\n  FormControl,\n  FormControlLabel,\n  FormControlLabelProps,\n  FormGroup,\n  FormHelperText,\n} from '@mui/material'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type CheckboxElementProps<T extends FieldValues> = Omit<\n  CheckboxProps,\n  'name'\n> & {\n  validation?: ControllerProps['rules']\n  name: Path<T>\n  parseError?: (error: FieldError) => string\n  label?: FormControlLabelProps['label']\n  helperText?: string\n  control?: Control<T>\n  labelProps?: Omit<FormControlLabelProps, 'label' | 'control'>\n}\n\nexport default function CheckboxElement<TFieldValues extends FieldValues>({\n  name,\n  validation = {},\n  required,\n  parseError,\n  label,\n  control,\n  helperText,\n  labelProps,\n  ...rest\n}: CheckboxElementProps<TFieldValues>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      render={({field: {value, onChange}, fieldState: {error}}) => {\n        const parsedHelperText = error\n          ? typeof customErrorFn === 'function'\n            ? customErrorFn(error)\n            : error.message\n          : helperText\n        return (\n          <FormControl required={required} error={!!error}>\n            <FormGroup row>\n              <FormControlLabel\n                {...labelProps}\n                label={label || ''}\n                control={\n                  <Checkbox\n                    {...rest}\n                    color={rest.color || 'primary'}\n                    sx={{\n                      ...rest.sx,\n                      color: error ? 'error.main' : undefined,\n                    }}\n                    value={value}\n                    checked={!!value}\n                    onChange={(ev) => {\n                      onChange(!value)\n                      if (typeof rest.onChange === 'function') {\n                        rest.onChange(ev, !value)\n                      }\n                    }}\n                  />\n                }\n              />\n            </FormGroup>\n            {parsedHelperText && (\n              <FormHelperText error={!!error}>\n                {parsedHelperText}\n              </FormHelperText>\n            )}\n          </FormControl>\n        )\n      }}\n    />\n  )\n}\n","import {createElement} from 'react'\nimport {MenuItem, TextField, TextFieldProps} from '@mui/material'\nimport {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type SelectElementProps<T extends FieldValues> = Omit<\n  TextFieldProps,\n  'name' | 'type' | 'onChange'\n> & {\n  validation?: ControllerProps['rules']\n  name: Path<T>\n  options?: {id: string | number; label: string | number}[] | any[]\n  valueKey?: string\n  labelKey?: string\n  type?: 'string' | 'number'\n  parseError?: (error: FieldError) => string\n  objectOnChange?: boolean\n  onChange?: (value: any) => void\n  control?: Control<T>\n}\n\nexport default function SelectElement<TFieldValues extends FieldValues>({\n  name,\n  required,\n  valueKey = 'id',\n  labelKey = 'label',\n  options = [],\n  parseError,\n  type,\n  objectOnChange,\n  validation = {},\n  control,\n  ...rest\n}: SelectElementProps<TFieldValues>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  const isNativeSelect = !!rest.SelectProps?.native\n  const ChildComponent = isNativeSelect ? 'option' : MenuItem\n\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      render={({\n        field: {onBlur, onChange, value, ref},\n        fieldState: {error},\n      }) => {\n        // handle shrink on number input fields\n        if (type === 'number' && typeof value !== 'undefined') {\n          rest.InputLabelProps = rest.InputLabelProps || {}\n          rest.InputLabelProps.shrink = true\n        }\n        if (typeof value === 'object') {\n          value = value[valueKey] // if value is object get key\n        }\n        return (\n          <TextField\n            {...rest}\n            name={name}\n            value={value ?? ''}\n            onBlur={onBlur}\n            onChange={(event) => {\n              let item: number | string = event.target.value\n              if (type === 'number' && item) {\n                item = Number(item)\n              }\n              onChange(item)\n              if (typeof rest.onChange === 'function') {\n                if (objectOnChange) {\n                  item = options.find((i) => i[valueKey] === item)\n                }\n                rest.onChange(item)\n              }\n            }}\n            select\n            required={required}\n            error={!!error}\n            helperText={\n              error\n                ? typeof customErrorFn === 'function'\n                  ? customErrorFn(error)\n                  : error.message\n                : rest.helperText\n            }\n            inputRef={ref}\n          >\n            {isNativeSelect && <option />}\n            {options.map((item: any) =>\n              createElement(\n                ChildComponent,\n                {\n                  key: `${name}_${item[valueKey]}`,\n                  value: item[valueKey],\n                },\n                item[labelKey]\n              )\n            )}\n          </TextField>\n        )\n      }}\n    />\n  )\n}\n","import {\n  Checkbox,\n  CheckboxProps,\n  FormControl,\n  FormControlLabel,\n  FormControlLabelProps,\n  FormGroup,\n  FormHelperText,\n  FormLabel,\n  useTheme,\n} from '@mui/material'\nimport {\n  Control,\n  ControllerProps,\n  FieldError,\n  Path,\n  useController,\n} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type CheckboxButtonGroupProps<T extends FieldValues> = {\n  options: {id: string | number; label: string}[] | any[]\n  helperText?: string\n  name: Path<T>\n  required?: boolean\n  parseError?: (error: FieldError) => string\n  label?: string\n  labelKey?: string\n  valueKey?: string\n  onChange?: (data: any) => void\n  returnObject?: boolean\n  disabled?: boolean\n  row?: boolean\n  control?: Control<T>\n  rules?: ControllerProps['rules']\n  checkboxColor?: CheckboxProps['color']\n  labelProps?: Omit<FormControlLabelProps, 'label' | 'control'>\n}\n\nexport default function CheckboxButtonGroup<TFieldValues extends FieldValues>({\n  helperText,\n  options,\n  label,\n  name,\n  parseError,\n  required,\n  labelKey = 'label',\n  valueKey = 'id',\n  returnObject,\n  disabled,\n  row,\n  control,\n  checkboxColor,\n  rules,\n  labelProps,\n  ...rest\n}: CheckboxButtonGroupProps<TFieldValues>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  const theme = useTheme()\n  const {\n    field: {value = [], onChange},\n    fieldState: {error},\n  } = useController({\n    name,\n    rules: required ? {required: 'This field is required'} : rules,\n    control,\n  })\n\n  helperText = error\n    ? typeof customErrorFn === 'function'\n      ? customErrorFn(error)\n      : error.message\n    : helperText\n\n  const handleChange = (index: number | string) => {\n    const newArray: (string | number)[] | any[] = [...value]\n    const exists =\n      value.findIndex((i: any) =>\n        returnObject ? i[valueKey] === index : i === index\n      ) === -1\n    if (exists) {\n      newArray.push(\n        returnObject ? options.find((i) => i[valueKey] === index) : index\n      )\n    } else {\n      newArray.splice(\n        value.findIndex((i: any) =>\n          returnObject ? i[valueKey] === index : i === index\n        ),\n        1\n      )\n    }\n    // setValue(name, newArray, { shouldValidate: true })\n    onChange(newArray)\n    if (typeof rest.onChange === 'function') {\n      rest.onChange(newArray)\n    }\n  }\n\n  return (\n    <FormControl error={!!error} required={required}>\n      {label && <FormLabel error={!!error}>{label}</FormLabel>}\n      <FormGroup row={row}>\n        {options.map((option: any) => {\n          const optionKey = option[valueKey]\n          if (!optionKey) {\n            console.error(\n              `CheckboxButtonGroup: valueKey ${valueKey} does not exist on option`,\n              option\n            )\n          }\n          const isChecked =\n            value.findIndex((item: any) =>\n              returnObject ? item[valueKey] === optionKey : item === optionKey\n            ) !== -1\n          return (\n            <FormControlLabel\n              {...labelProps}\n              control={\n                <Checkbox\n                  sx={{\n                    color: error ? theme.palette.error.main : undefined,\n                  }}\n                  color={checkboxColor || 'primary'}\n                  value={optionKey}\n                  checked={isChecked}\n                  disabled={disabled}\n                  onChange={() => handleChange(optionKey)}\n                />\n              }\n              label={option[labelKey]}\n              key={optionKey}\n            />\n          )\n        })}\n      </FormGroup>\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </FormControl>\n  )\n}\n","import CloseIcon from '@mui/icons-material/Cancel'\nimport {Control, Controller, FieldError, Path} from 'react-hook-form'\nimport {\n  Checkbox,\n  Chip,\n  FormControl,\n  FormControlProps,\n  FormHelperText,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n  SelectProps,\n} from '@mui/material'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type MultiSelectElementProps<T extends FieldValues> = Omit<\n  SelectProps,\n  'value'\n> & {\n  options: {id: string | number; label: string}[] | any[]\n  label?: string\n  itemKey?: string\n  itemValue?: string\n  itemLabel?: string\n  required?: boolean\n  validation?: any\n  name: Path<T>\n  parseError?: (error: FieldError) => string\n  minWidth?: number\n  menuMaxHeight?: number\n  menuMaxWidth?: number\n  helperText?: string\n  showChips?: boolean\n  control?: Control<T>\n  showCheckbox?: boolean\n  formControlProps?: Omit<FormControlProps, 'fullWidth' | 'variant'>\n}\n\nconst ITEM_HEIGHT = 48\nconst ITEM_PADDING_TOP = 8\n\nexport default function MultiSelectElement<TFieldValues extends FieldValues>({\n  options,\n  label = '',\n  itemKey = 'id',\n  itemValue = '',\n  itemLabel = 'label',\n  required = false,\n  validation = {},\n  parseError,\n  name,\n  menuMaxHeight = ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n  menuMaxWidth = 250,\n  minWidth = 120,\n  helperText,\n  showChips,\n  control,\n  showCheckbox,\n  formControlProps,\n  ...rest\n}: MultiSelectElementProps<TFieldValues>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      render={({\n        field: {value, onChange, onBlur},\n        fieldState: {invalid, error},\n      }) => {\n        helperText = error\n          ? typeof customErrorFn === 'function'\n            ? customErrorFn(error)\n            : error.message\n          : helperText\n        return (\n          <FormControl\n            {...formControlProps}\n            style={{\n              ...formControlProps?.style,\n              minWidth,\n            }}\n            variant={rest.variant}\n            fullWidth={rest.fullWidth}\n            error={invalid}\n            size={rest.size}\n          >\n            {label && (\n              <InputLabel\n                size={rest.size === 'small' ? 'small' : undefined}\n                error={invalid}\n                htmlFor={rest.id || `select-multi-select-${name}`}\n                required={required}\n              >\n                {label}\n              </InputLabel>\n            )}\n            <Select\n              {...rest}\n              id={rest.id || `select-multi-select-${name}`}\n              multiple\n              label={label || undefined}\n              error={invalid}\n              value={value || []}\n              required={required}\n              onChange={onChange}\n              onBlur={onBlur}\n              MenuProps={{\n                ...rest.MenuProps,\n                PaperProps: {\n                  ...(rest.MenuProps?.PaperProps ?? {\n                    style: {\n                      maxHeight: menuMaxHeight,\n                      width: menuMaxWidth,\n                      ...rest.MenuProps?.PaperProps?.style,\n                    },\n                  }),\n                },\n              }}\n              renderValue={\n                typeof rest.renderValue === 'function'\n                  ? rest.renderValue\n                  : showChips\n                  ? (selected) => (\n                      <div style={{display: 'flex', flexWrap: 'wrap'}}>\n                        {((selected as any[]) || []).map((selectedValue) => (\n                          <Chip\n                            key={selectedValue}\n                            label={selectedValue}\n                            style={{display: 'flex', flexWrap: 'wrap'}}\n                            onDelete={() => {\n                              onChange(\n                                value.filter((i: any) => i !== selectedValue)\n                              )\n                              // setValue(name, formValue.filter((i: any) => i !== value), { shouldValidate: true })\n                            }}\n                            deleteIcon={\n                              <CloseIcon\n                                onMouseDown={(ev) => {\n                                  ev.stopPropagation()\n                                }}\n                              />\n                            }\n                          />\n                        ))}\n                      </div>\n                    )\n                  : (selected) =>\n                      Array.isArray(selected) ? selected.join(', ') : ''\n              }\n            >\n              {options.map((item) => {\n                const val: string | number = item[itemValue || itemKey] || item\n                const isChecked = Array.isArray(value)\n                  ? value.includes(val)\n                  : false\n                return (\n                  <MenuItem\n                    key={val}\n                    value={val}\n                    sx={{\n                      fontWeight: (theme) =>\n                        isChecked\n                          ? theme.typography.fontWeightBold\n                          : theme.typography.fontWeightRegular,\n                    }}\n                  >\n                    {showCheckbox && <Checkbox checked={isChecked} />}\n                    <ListItemText primary={item[itemLabel] || item} />\n                  </MenuItem>\n                )\n              })}\n            </Select>\n            {helperText && <FormHelperText>{helperText}</FormHelperText>}\n          </FormControl>\n        )\n      }}\n    />\n  )\n}\n","import {MouseEvent, ReactNode, useState} from 'react'\nimport TextFieldElement, {TextFieldElementProps} from './TextFieldElement'\nimport {IconButton, IconButtonProps, InputAdornment} from '@mui/material'\nimport Visibility from '@mui/icons-material/Visibility'\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\n\nexport type PasswordElementProps<T extends FieldValues> =\n  TextFieldElementProps<T> & {\n    iconColor?: IconButtonProps['color']\n    renderIcon?: (password: boolean) => ReactNode\n  }\n\nexport default function PasswordElement<TFieldValues extends FieldValues>({\n  iconColor,\n  renderIcon = (password) => (password ? <Visibility /> : <VisibilityOff />),\n  ...props\n}: PasswordElementProps<TFieldValues>): JSX.Element {\n  const [password, setPassword] = useState<boolean>(true)\n  return (\n    <TextFieldElement\n      {...props}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position={'end'}>\n            <IconButton\n              onMouseDown={(e: MouseEvent<HTMLButtonElement>) =>\n                e.preventDefault()\n              }\n              onClick={() => setPassword(!password)}\n              tabIndex={-1}\n              color={iconColor ?? 'default'}\n            >\n              {renderIcon(password)}\n            </IconButton>\n          </InputAdornment>\n        ),\n      }}\n      type={password ? 'password' : 'text'}\n    />\n  )\n}\n","import {ChangeEvent} from 'react'\nimport {Control, FieldError, Path, useController} from 'react-hook-form'\nimport {\n  FormControl,\n  FormControlLabel,\n  FormControlLabelProps,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  useTheme,\n} from '@mui/material'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type RadioButtonGroupProps<T extends FieldValues> = {\n  options: {label: string; id: string | number}[] | any[]\n  helperText?: string\n  name: Path<T>\n  required?: boolean\n  parseError?: (error: FieldError) => string\n  label?: string\n  labelKey?: string\n  valueKey?: string\n  type?: 'number' | 'string'\n  emptyOptionLabel?: 'string'\n  onChange?: (value: any) => void\n  returnObject?: boolean\n  row?: boolean\n  control?: Control<T>\n  labelProps?: Omit<FormControlLabelProps, 'label' | 'control' | 'value'>\n  disabled?: boolean\n}\n\nexport default function RadioButtonGroup<TFieldValues extends FieldValues>({\n  helperText,\n  options,\n  label,\n  name,\n  parseError,\n  labelKey = 'label',\n  valueKey = 'id',\n  required,\n  emptyOptionLabel,\n  returnObject,\n  row,\n  control,\n  type,\n  labelProps,\n  disabled,\n  ...rest\n}: RadioButtonGroupProps<TFieldValues>): JSX.Element {\n  const theme = useTheme()\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  const {\n    field: {value, onChange},\n    fieldState: {error},\n  } = useController({\n    name,\n    rules: required ? {required: 'This field is required'} : undefined,\n    control,\n  })\n\n  helperText = error\n    ? typeof customErrorFn === 'function'\n      ? customErrorFn(error)\n      : error.message\n    : helperText\n\n  const onRadioChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const radioValue = (event.target as HTMLInputElement).value\n    const returnValue = returnObject\n      ? options.find((items) => items[valueKey] === radioValue)\n      : radioValue\n    // setValue(name, returnValue, { shouldValidate: true })\n    onChange(returnValue)\n    if (typeof rest.onChange === 'function') {\n      rest.onChange(returnValue)\n    }\n  }\n\n  return (\n    <FormControl error={!!error}>\n      {label && (\n        <FormLabel required={required} error={!!error}>\n          {label}\n        </FormLabel>\n      )}\n      <RadioGroup\n        onChange={onRadioChange}\n        name={name}\n        row={row}\n        value={value || ''}\n      >\n        {emptyOptionLabel && (\n          <FormControlLabel\n            {...labelProps}\n            control={\n              <Radio\n                sx={{\n                  color: error ? theme.palette.error.main : undefined,\n                }}\n                checked={!value}\n              />\n            }\n            label={emptyOptionLabel}\n            value=\"\"\n          />\n        )}\n        {options.map((option: any) => {\n          const optionKey = option[valueKey]\n          if (!optionKey) {\n            console.error(\n              `CheckboxButtonGroup: valueKey ${valueKey} does not exist on option`,\n              option\n            )\n          }\n          let val = returnObject ? value[valueKey] : value\n          if (type === 'number') {\n            val = Number(val)\n          }\n          const isChecked = val === optionKey\n          return (\n            <FormControlLabel\n              {...labelProps}\n              control={\n                <Radio\n                  sx={{\n                    color: error ? theme.palette.error.main : undefined,\n                  }}\n                  disabled={disabled}\n                  checked={isChecked}\n                />\n              }\n              value={optionKey}\n              label={option[labelKey]}\n              key={optionKey}\n            />\n          )\n        })}\n      </RadioGroup>\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </FormControl>\n  )\n}\n","import {Control, Controller, Path} from 'react-hook-form'\nimport {FormControlLabel, FormControlLabelProps, Switch} from '@mui/material'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\n\ntype IProps = Omit<FormControlLabelProps, 'control'>\n\nexport type SwitchElementProps<T extends FieldValues> = IProps & {\n  name: Path<T>\n  control?: Control<T>\n}\n\nexport default function SwitchElement<TFieldValues extends FieldValues>({\n  name,\n  control,\n  ...other\n}: SwitchElementProps<TFieldValues>) {\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({field}) => (\n        <FormControlLabel\n          control={<Switch {...field} checked={!!field.value} />}\n          {...other}\n        />\n      )}\n    />\n  )\n}\n","import PasswordElement, {PasswordElementProps} from './PasswordElement'\nimport {Path, useWatch} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\n\nexport type PasswordRepeatElementProps<T extends FieldValues> =\n  PasswordElementProps<T> & {\n    passwordFieldName: Path<T>\n  }\nexport default function PasswordRepeatElement<\n  TFieldValues extends FieldValues\n>({passwordFieldName, ...rest}: PasswordRepeatElementProps<TFieldValues>) {\n  const pwValue = useWatch({\n    name: passwordFieldName,\n    control: rest.control,\n  })\n  return (\n    <PasswordElement\n      {...rest}\n      validation={{\n        validate: (value: string) => {\n          return value === pwValue || 'Password should match'\n        },\n      }}\n    />\n  )\n}\n","import {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {\n  Autocomplete,\n  AutocompleteProps,\n  Checkbox,\n  TextField,\n  TextFieldProps,\n} from '@mui/material'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type AutocompleteElementProps<\n  F extends FieldValues,\n  T,\n  M extends boolean | undefined,\n  D extends boolean | undefined\n> = {\n  name: Path<F>\n  control?: Control<F>\n  options: T[]\n  loading?: boolean\n  multiple?: M\n  matchId?: boolean\n  rules?: ControllerProps['rules']\n  parseError?: (error: FieldError) => string\n  required?: boolean\n  label?: TextFieldProps['label']\n  showCheckbox?: boolean\n  autocompleteProps?: Omit<\n    AutocompleteProps<T, M, D, any>,\n    'name' | 'options' | 'loading' | 'renderInput'\n  >\n  textFieldProps?: Omit<TextFieldProps, 'name' | 'required' | 'label'>\n}\n\ntype AutoDefault = {\n  id: string | number // must keep id in case of keepObject\n  label: string\n}\n\nexport default function AutocompleteElement<TFieldValues extends FieldValues>({\n  textFieldProps,\n  autocompleteProps,\n  name,\n  control,\n  options,\n  loading,\n  showCheckbox,\n  rules,\n  required,\n  multiple,\n  matchId,\n  label,\n  parseError,\n}: AutocompleteElementProps<\n  TFieldValues,\n  AutoDefault | string | any,\n  boolean | undefined,\n  boolean | undefined\n>) {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  const validationRules: ControllerProps['rules'] = {\n    ...rules,\n    ...(required && {\n      required: rules?.required || 'This field is required',\n    }),\n  }\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={validationRules}\n      render={({field: {onChange, onBlur, value}, fieldState: {error}}) => {\n        let currentValue = multiple ? value || [] : value || null\n        if (matchId) {\n          currentValue = multiple\n            ? (value || []).map((i: any) =>\n                options.find((j) => (j.id || j) === i)\n              )\n            : options.find((i) => (i.id || i) === value) || null\n        }\n        return (\n          <Autocomplete\n            {...autocompleteProps}\n            value={currentValue}\n            loading={loading}\n            multiple={multiple}\n            options={options}\n            disableCloseOnSelect={\n              typeof autocompleteProps?.disableCloseOnSelect === 'boolean'\n                ? autocompleteProps.disableCloseOnSelect\n                : !!multiple\n            }\n            isOptionEqualToValue={\n              autocompleteProps?.isOptionEqualToValue\n                ? autocompleteProps.isOptionEqualToValue\n                : (option, value) => {\n                    return value ? option.id === (value?.id || value) : false\n                  }\n            }\n            getOptionLabel={\n              autocompleteProps?.getOptionLabel\n                ? autocompleteProps.getOptionLabel\n                : (option) => {\n                    return `${option?.label || option}`\n                  }\n            }\n            onChange={(event, value, reason, details) => {\n              let changedVal = value\n              if (matchId) {\n                changedVal = Array.isArray(value)\n                  ? value.map((i: any) => i?.id || i)\n                  : value?.id || value\n              }\n              onChange(changedVal)\n              if (autocompleteProps?.onChange) {\n                autocompleteProps.onChange(event, value, reason, details)\n              }\n            }}\n            renderOption={\n              autocompleteProps?.renderOption ??\n              (showCheckbox\n                ? (props, option, {selected}) => (\n                    <li {...props}>\n                      <Checkbox sx={{marginRight: 1}} checked={selected} />\n                      {autocompleteProps?.getOptionLabel?.(option) ||\n                        option.label ||\n                        option}\n                    </li>\n                  )\n                : undefined)\n            }\n            onBlur={(event) => {\n              onBlur()\n              if (typeof autocompleteProps?.onBlur === 'function') {\n                autocompleteProps.onBlur(event)\n              }\n            }}\n            renderInput={(params) => (\n              <TextField\n                name={name}\n                required={rules?.required ? true : required}\n                label={label}\n                {...textFieldProps}\n                {...params}\n                error={!!error}\n                InputLabelProps={{\n                  ...params.InputLabelProps,\n                  ...textFieldProps?.InputLabelProps,\n                }}\n                InputProps={{\n                  ...params.InputProps,\n                  endAdornment: (\n                    <>\n                      {loading ? (\n                        <CircularProgress color=\"inherit\" size={20} />\n                      ) : null}\n                      {params.InputProps.endAdornment}\n                    </>\n                  ),\n                  ...textFieldProps?.InputProps,\n                }}\n                inputProps={{\n                  ...params.inputProps,\n                  ...textFieldProps?.inputProps,\n                }}\n                helperText={\n                  error\n                    ? typeof customErrorFn === 'function'\n                      ? customErrorFn(error)\n                      : error.message\n                    : textFieldProps?.helperText\n                }\n              />\n            )}\n          />\n        )\n      }}\n    />\n  )\n}\n","import {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {\n  FormControl,\n  FormControlProps,\n  FormHelperText,\n  FormLabel,\n  Slider,\n  SliderProps,\n} from '@mui/material'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type SliderElementProps<T extends FieldValues> = Omit<\n  SliderProps,\n  'control'\n> & {\n  name: Path<T>\n  control?: Control<T>\n  label?: string\n  rules?: ControllerProps['rules']\n  parseError?: (error: FieldError) => string\n  required?: boolean\n  formControlProps?: FormControlProps\n}\n\nexport default function SliderElement<TFieldValues extends FieldValues>({\n  name,\n  control,\n  label,\n  rules = {},\n  parseError,\n  required,\n  formControlProps,\n  ...other\n}: SliderElementProps<TFieldValues>) {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !rules.required) {\n    rules.required = 'This field is required'\n  }\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={rules}\n      render={({field: {onChange, value}, fieldState: {invalid, error}}) => {\n        const parsedHelperText = error\n          ? typeof customErrorFn === 'function'\n            ? customErrorFn(error)\n            : error.message\n          : null\n        return (\n          <FormControl\n            error={invalid}\n            required={required}\n            fullWidth\n            {...formControlProps}\n          >\n            {label && (\n              <FormLabel component=\"legend\" error={invalid}>\n                {label}\n              </FormLabel>\n            )}\n            <Slider\n              {...other}\n              value={value}\n              onChange={onChange}\n              valueLabelDisplay={other.valueLabelDisplay || 'auto'}\n            />\n            {parsedHelperText && (\n              <FormHelperText error={invalid}>\n                {parsedHelperText}\n              </FormHelperText>\n            )}\n          </FormControl>\n        )\n      }}\n    />\n  )\n}\n","import {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  FormLabelProps,\n  ToggleButton,\n  ToggleButtonGroup,\n  ToggleButtonGroupProps,\n  ToggleButtonProps,\n} from '@mui/material'\nimport {ReactNode} from 'react'\nimport {useFormError} from './FormErrorProvider'\n\ntype SingleToggleButtonProps = Omit<ToggleButtonProps, 'value' | 'children'> & {\n  id: number | string\n  label: ReactNode\n}\n\nexport type ToggleButtonGroupElementProps<T extends FieldValues> =\n  ToggleButtonGroupProps & {\n    required?: boolean\n    label?: string\n    validation?: ControllerProps['rules']\n    name: Path<T>\n    parseError?: (error: FieldError) => string\n    control?: Control<T>\n    options: SingleToggleButtonProps[]\n    formLabelProps?: FormLabelProps\n    helperText?: string\n    enforceAtLeastOneSelected?: boolean\n  }\n\nexport default function ToggleButtonGroupElement<\n  TFieldValues extends FieldValues = FieldValues\n>({\n  name,\n  control,\n  label,\n  validation = {},\n  required,\n  options = [],\n  parseError,\n  helperText,\n  formLabelProps,\n  enforceAtLeastOneSelected = false,\n  exclusive,\n  ...toggleButtonGroupProps\n}: ToggleButtonGroupElementProps<TFieldValues>) {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  const isRequired = required || !!validation?.required\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={validation}\n      render={({field: {value, onChange, onBlur}, fieldState: {error}}) => {\n        const renderHelperText = error\n          ? typeof customErrorFn === 'function'\n            ? customErrorFn(error)\n            : error.message\n          : helperText\n        return (\n          <FormControl error={!!error} required={isRequired}>\n            {label && (\n              <FormLabel\n                {...formLabelProps}\n                error={!!error}\n                required={isRequired}\n                sx={{mb: 1, ...formLabelProps?.sx}}\n              >\n                {label}\n              </FormLabel>\n            )}\n            <ToggleButtonGroup\n              {...toggleButtonGroupProps}\n              exclusive={exclusive}\n              value={value}\n              onBlur={onBlur}\n              onChange={(event, val) => {\n                if (enforceAtLeastOneSelected) {\n                  // don't allow unselecting the last item\n                  if (exclusive && val === null) return\n                  if (!exclusive && val.length === 0) return\n                }\n                onChange(val)\n                if (typeof toggleButtonGroupProps.onChange === 'function') {\n                  toggleButtonGroupProps.onChange(event, val)\n                }\n              }}\n            >\n              {options.map(({label, id, ...toggleProps}) => (\n                <ToggleButton value={id} {...toggleProps} key={id}>\n                  {label}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n            {renderHelperText && (\n              <FormHelperText>{renderHelperText}</FormHelperText>\n            )}\n          </FormControl>\n        )\n      }}\n    />\n  )\n}\n","import {TextareaAutosize, TextField, TextFieldProps} from '@mui/material'\nimport {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {CSSProperties} from 'react'\nimport {useFormError} from './FormErrorProvider'\n\nexport type TextareaAutosizeElementProps<T extends FieldValues = FieldValues> =\n  Omit<TextFieldProps, 'name' | 'type'> & {\n    validation?: ControllerProps['rules']\n    name: Path<T>\n    parseError?: (error: FieldError) => string\n    control?: Control<T>\n    resizeStyle?: CSSProperties['resize']\n  }\n\nexport default function TextareaAutosizeElement<\n  TFieldValues extends FieldValues = FieldValues\n>({\n  validation = {},\n  parseError,\n  required,\n  name,\n  control,\n  rows,\n  resizeStyle,\n  ...rest\n}: TextareaAutosizeElementProps<TFieldValues>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={validation}\n      render={({\n        field: {value, onChange, onBlur, ref},\n        fieldState: {error},\n      }) => (\n        <TextField\n          {...rest}\n          name={name}\n          value={value ?? ''}\n          onChange={(ev) => {\n            onChange(ev.target.value)\n            if (typeof rest.onChange === 'function') {\n              rest.onChange(ev)\n            }\n          }}\n          onBlur={onBlur}\n          required={required}\n          error={!!error}\n          helperText={\n            error\n              ? typeof customErrorFn === 'function'\n                ? customErrorFn(error)\n                : error.message\n              : rest.helperText\n          }\n          inputRef={ref}\n          multiline\n          InputProps={{\n            inputComponent: TextareaAutosize,\n            inputProps: {\n              minRows: rows,\n              style: {\n                resize: resizeStyle || 'both',\n              },\n            },\n          }}\n        />\n      )}\n    />\n  )\n}\n"],"mappings":"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","names":["src_exports","__export","AutocompleteElement","CheckboxButtonGroup","CheckboxElement","DatePickerElement","DateTimePickerElement","FormContainer","FormErrorProvider","MultiSelectElement","PasswordElement","PasswordRepeatElement","RadioButtonGroup","SelectElement","SliderElement","SwitchElement","TextFieldElement","TextareaAutosizeElement","TimePickerElement","ToggleButtonGroupElement","useFormError","__toCommonJS","import_react","import_material","import_react_hook_form","import_react","import_jsx_runtime","FormErrorProviderContext","error","FormErrorProvider","onError","children","useFormError","errorCtx","import_jsx_runtime","TextFieldElement","validation","parseError","type","required","name","control","rest","errorMsgFn","useFormError","customErrorFn","value","onChange","onBlur","ref","error","ev","import_react_hook_form","import_jsx_runtime","FormContainer","handleSubmit","children","FormProps","formContext","onSuccess","onError","useFormProps","FormProviderWithoutContext","methods","import_DatePicker","import_react_hook_form","import_material","import_jsx_runtime","DatePickerElement","parseError","name","required","validation","inputProps","control","textReadOnly","rest","errorMsgFn","useFormError","customErrorFn","field","error","r","args","v","keyboardInputValue","inputError","params","import_DateTimePicker","import_react_hook_form","import_material","import_jsx_runtime","DateTimePickerElement","parseError","name","required","validation","inputProps","control","textReadOnly","rest","errorMsgFn","useFormError","customErrorFn","field","error","r","args","v","keyboardInputValue","inputError","params","import_TimePicker","import_react_hook_form","import_material","import_jsx_runtime","TimePickerElement","parseError","name","required","validation","inputProps","control","textReadOnly","rest","errorMsgFn","useFormError","customErrorFn","field","error","r","args","v","keyboardInputValue","inputError","params","import_react_hook_form","import_material","import_jsx_runtime","CheckboxElement","name","validation","required","parseError","label","control","helperText","labelProps","rest","errorMsgFn","useFormError","customErrorFn","value","onChange","error","parsedHelperText","ev","import_react","import_material","import_react_hook_form","import_jsx_runtime","SelectElement","name","required","valueKey","labelKey","options","parseError","type","objectOnChange","validation","control","rest","_a","errorMsgFn","useFormError","customErrorFn","isNativeSelect","ChildComponent","onBlur","onChange","value","ref","error","event","item","i","import_material","import_react_hook_form","import_jsx_runtime","import_react","CheckboxButtonGroup","helperText","options","label","name","parseError","required","labelKey","valueKey","returnObject","disabled","row","control","checkboxColor","rules","labelProps","rest","errorMsgFn","useFormError","customErrorFn","theme","value","onChange","error","handleChange","index","newArray","i","option","optionKey","isChecked","item","import_Cancel","import_react_hook_form","import_material","import_jsx_runtime","ITEM_HEIGHT","ITEM_PADDING_TOP","MultiSelectElement","options","label","itemKey","itemValue","itemLabel","required","validation","parseError","name","menuMaxHeight","menuMaxWidth","minWidth","helperText","showChips","control","showCheckbox","formControlProps","rest","errorMsgFn","useFormError","customErrorFn","value","onChange","onBlur","invalid","error","_a","_b","_c","selected","selectedValue","i","CloseIcon","ev","item","val","isChecked","theme","import_react","import_material","import_Visibility","import_VisibilityOff","import_jsx_runtime","PasswordElement","iconColor","renderIcon","password","Visibility","VisibilityOff","props","setPassword","TextFieldElement","e","import_react_hook_form","import_material","import_jsx_runtime","import_react","RadioButtonGroup","helperText","options","label","name","parseError","labelKey","valueKey","required","emptyOptionLabel","returnObject","row","control","type","labelProps","disabled","rest","theme","errorMsgFn","useFormError","customErrorFn","value","onChange","error","event","radioValue","returnValue","items","option","optionKey","val","isChecked","import_react_hook_form","import_material","import_jsx_runtime","SwitchElement","name","control","other","field","import_react_hook_form","import_jsx_runtime","PasswordRepeatElement","passwordFieldName","rest","pwValue","PasswordElement","value","import_react_hook_form","import_material","import_CircularProgress","import_jsx_runtime","AutocompleteElement","textFieldProps","autocompleteProps","name","control","options","loading","showCheckbox","rules","required","multiple","matchId","label","parseError","errorMsgFn","useFormError","customErrorFn","validationRules","onChange","onBlur","value","error","currentValue","i","j","option","event","reason","details","changedVal","props","selected","_a","params","CircularProgress","import_react_hook_form","import_material","import_jsx_runtime","SliderElement","name","control","label","rules","parseError","required","formControlProps","other","errorMsgFn","useFormError","customErrorFn","onChange","value","invalid","error","parsedHelperText","import_react_hook_form","import_material","import_jsx_runtime","import_react","ToggleButtonGroupElement","name","control","label","validation","required","options","parseError","helperText","formLabelProps","enforceAtLeastOneSelected","exclusive","toggleButtonGroupProps","errorMsgFn","useFormError","customErrorFn","isRequired","value","onChange","onBlur","error","renderHelperText","event","val","id","toggleProps","import_material","import_react_hook_form","import_jsx_runtime","TextareaAutosizeElement","validation","parseError","required","name","control","rows","resizeStyle","rest","errorMsgFn","useFormError","customErrorFn","value","onChange","onBlur","ref","error","ev","__reExport","src_exports"]}